"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _stringHash = require("string-hash");

var _stringHash2 = _interopRequireDefault(_stringHash);

var _hashToString = require("hash-to-string");

var _hashToString2 = _interopRequireDefault(_hashToString);

var _babelPluginExtractTags = require("babel-plugin-extract-tags");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
var toClassName = (0, _hashToString2.default)(characters);

var taggedCallback = function taggedCallback(_ref, types) {
  var tag = _ref.tag,
      tagOptions = _ref.tagOptions,
      taggedContent = _ref.taggedContent;
  var outputPath = tagOptions.outputPath,
      outputFileExtension = tagOptions.outputFileExtension;

  var contentHash = (0, _stringHash2.default)(taggedContent);
  if (tag.member === "global") {
    var outputContent = taggedContent;
    var filename = "global-" + contentHash + "." + outputFileExtension;
    var outputFilePath = _path2.default.join(outputPath, filename);
    var tagArguments = [];
    return { tagArguments: tagArguments, outputContent: outputContent, outputFilePath: outputFilePath };
  } else {
    var className = toClassName(contentHash);
    var _outputContent = "." + className + " {" + taggedContent + "}";
    var _filename = className + "-" + contentHash + "." + outputFileExtension;
    var _outputFilePath = _path2.default.join(outputPath, _filename);
    var _tagArguments = [types.stringLiteral(className)];
    return { tagArguments: _tagArguments, outputContent: _outputContent, outputFilePath: _outputFilePath };
  }
};

var options = {
  taggerModules: ["styled-react", "styled-react/js"],
  outputFileExtension: "css",
  outputPath: _path2.default.join(__dirname, "../output"),
  taggerMembers: { "*": {} },
  taggedCallback: taggedCallback
};

exports.default = (0, _babelPluginExtractTags.createPlugin)(options);